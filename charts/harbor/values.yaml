# (These comments will go away)
#TODO here still:
# Secrets in sealed secrets

#TODO in environment dev dev values.yml 
# database.type: external` and re-using Laure's work on the Postgres(ql) chart
# metrics.serviceMonitor in use with prometheus
# correct addresses

harbor:

  # Find explanations and the template for the values below at https://artifacthub.io/packages/helm/bitnami/harbor?modal=values
  
  nameOverride: "harbor"

#  externalURL: https://core.harbor.chorus-tre.local TODO: Put back after testing
  externalURL: https://core.harbor.dev.chorus-tre.ch

  logLevel: warn

  exposureType: ingress

  service:
    ports:
      http: 80
      https: 443

  core:
    existingEnvVarsSecret: "harbor-secret-vars"

  ingress:
    core:
      ingressClassName: "nginx"
      pathType: Prefix
      # hostname: core.harbor.chorus-tre.local TODO: Put back after testing
      hostname: core.harbor.dev.chorus-tre.ch
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
        nginx.ingress.kubernetes.io/proxy-body-size: "0"     
      tls:
        - hosts:
          - harbor.chorus-tre.local
          secretName: harbor.chorus-tre.local

  persistence:
    enabled: true
    resourcePolicy: "keep"
    persistentVolumeClaim:
      registry:
        existingClaim: ""
        storageClass: ""
        subPath: ""
        accessModes:
          - ReadWriteOnce
        size: 20Gi
        annotations: {}
        selector: {}
      jobservice:
        existingClaim: ""
        storageClass: ""
        subPath: ""
        accessModes:
          - ReadWriteOnce
        size: 1Gi
        annotations: {}
        selector: {}
      trivy:
        storageClass: ""
        accessModes:
          - ReadWriteOnce
        size: 5Gi
        annotations: {}
        selector: {}

  ## PostgreSQL chart configuration
  ## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
  ## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
  ## @param postgresql.auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
  ## @param postgresql.auth.postgresPassword Password for the "postgres" admin user
  ## @param postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials
  ## @param postgresql.architecture PostgreSQL architecture (`standalone` or `replication`)
  ## @param postgresql.primary.extendedConfiguration Extended PostgreSQL Primary configuration (appended to main or default configuration)
  ## @param postgresql.primary.initdb.scripts [object] Initdb scripts to create Harbor databases
  ##
  postgresql:
    enabled: true
    ## Override PostgreSQL default image as 14.x is not supported https://goharbor.io/docs/2.4.0/install-config/
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql
    ## @param postgresql.image.registry [default: REGISTRY_NAME] PostgreSQL image registry
    ## @param postgresql.image.repository [default: REPOSITORY_NAME/postgresql] PostgreSQL image repository
    ## @skip postgresql.image.tag PostgreSQL image tag (immutable tags are recommended)
    ## @param postgresql.image.digest PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ##
    image:
      registry: docker.io
      repository: bitnami/postgresql
      tag: 13.15.0-debian-12-r2
      digest: ""
    auth:
      enablePostgresUser: true
      postgresPassword: not-secure-database-password
      existingSecret: ""
    architecture: standalone
    primary:
      extendedConfiguration: |
        max_connections = 1024
      initdb:
        scripts:
          initial-registry.sql: |
            CREATE DATABASE registry ENCODING 'UTF8';
            \c registry;
            CREATE TABLE schema_migrations(version bigint not null primary key, dirty boolean not null);
      ## PostgreSQL Primary resource requests and limits
      ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
      ## @param postgresql.primary.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).
      ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
      ##
      resourcesPreset: "nano"
      ## @param postgresql.primary.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
      ## Example:
      ## resources:
      ##   requests:
      ##     cpu: 2
      ##     memory: 512Mi
      ##   limits:
      ##     cpu: 3
      ##     memory: 1024Mi
      ##
      resources: {}
  ## External PostgreSQL configuration
  ## All of these values are only used when postgresql.enabled is set to false
  ## @param externalDatabase.host Database host
  ## @param externalDatabase.port Database port number
  ## @param externalDatabase.user Non-root username for Harbor
  ## @param externalDatabase.password Password for the non-root username for Harbor
  ## @param externalDatabase.sslmode External database ssl mode
  ## @param externalDatabase.coreDatabase External database name for core
  ##
  # externalDatabase:
  #   host: localhost
  #   port: 5432
  #   user: bn_harbor
  #   password: ""
  #   sslmode: disable
  #   coreDatabase: ""

  metrics:
    enabled: true
    path: /metrics
    serviceMonitor:
      enabled: false
      namespace: ""
      interval: ""
      scrapeTimeout: ""
      labels: {}
      selector: {}
      relabelings: []
      metricRelabelings: []
      honorLabels: false
      jobLabel: ""
