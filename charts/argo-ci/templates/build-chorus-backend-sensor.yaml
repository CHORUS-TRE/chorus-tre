{{- $fullName := include "argo-ci.fullname" . -}}
{{- $serviceAccountName := include "argo-ci.serviceAccountName" . -}}
{{- $githubSecretName := index .Values.githubSecrets "chorus-backend" }}
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: {{ $fullName }}-build-chorus-backend
  labels:
    {{- include "argo-ci.labels" . | nindent 4 }}
spec:
  eventBusName: {{ $fullName }}-default
  template:
    serviceAccountName: {{ $serviceAccountName }}
  dependencies:
    - name: build-chorus-backend
      eventSourceName: {{ $fullName }}-github
      eventName: chorus-backend
      filters:
        data:
          - path: headers.X-Github-Event
            type: string
            value:
              - push
          - path: "body.ref"
            type: string
            value:
              # The goal is to publish tagged releases.
              - "refs/heads/master"
              - "refs/tags/v*"

    - name: ci-chorus-backend
      eventSourceName: {{ $fullName }}-github
      eventName: chorus-backend
      filters:
        data:
          - path: headers.X-Github-Event
            type: string
            value:
              - pull_request
          - path: "body.action"
            type: string
            value:
              - "opened"
              - "synchronize"

  triggers:
    - template:
        conditions: ci-chorus-backend
        name: github-workflow-trigger-ci-chorus-backend
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: "-"
              spec:
                serviceAccountName: {{ $serviceAccountName }}
                entrypoint: go-test

                arguments:
                  parameters:
                    - name: repoUrl
                    - name: repoFullName
                    - name: ref
                    - name: sha

                hooks:
                  running:
                    expression: workflow.status == "Running"
                    templateRef:
                      name: {{ $fullName }}-github-notify-template
                      template: github-notify
                    arguments:
                      parameters:
                        - name: repoFullName
                          value: "{{`{{workflow.parameters.repoFullName}}`}}"
                        - name: sha
                          value: "{{`{{workflow.parameters.sha}}`}}"
                        - name: githubSecret
                          value: {{ $githubSecretName }}
                  exit:
                    templateRef:
                      name: {{ $fullName }}-github-notify-template
                      template: github-notify
                    arguments:
                      parameters:
                        - name: repoFullName
                          value: "{{`{{workflow.parameters.repoFullName}}`}}"
                        - name: sha
                          value: "{{`{{workflow.parameters.sha}}`}}"
                        - name: githubSecret
                          value: {{ $githubSecretName }}

                templates:
                  - name: go-test
                    steps:
                      - - name: run-tests
                          template: test

                  - name: test
                    inputs:
                      artifacts:
                        - name: git
                          path: "/src"
                          git:
                            repo: "{{`{{workflow.parameters.repoUrl}}`}}"
                            revision: "{{`{{workflow.parameters.sha}}`}}"
                            usernameSecret:
                              name: {{ $githubSecretName }}
                              key: username
                            passwordSecret:
                              name: {{ $githubSecretName }}
                              key: password
                            ref: "{{`{{workflow.parameters.ref}}`}}"
                    container:
                      image: "golang:1.23-bookworm"
                      command: [sh, -e, -c]
                      args:
                        - >-
                          go test -v ./...

                      workingDir: "/src"

          parameters:
            - src:
                dependencyName: ci-chorus-backend
                dataKey: body.pull_request.head.repo.clone_url
              dest: spec.arguments.parameters.0.value
            - src:
                dependencyName: ci-chorus-backend
                dataKey: body.repository.full_name
              dest: spec.arguments.parameters.1.value
            - src:
                dependencyName: ci-chorus-backend
                dataKey: body.pull_request.head.ref
              dest: spec.arguments.parameters.2.value
            - src:
                dependencyName: ci-chorus-backend
                dataKey: body.pull_request.head.sha
              dest: spec.arguments.parameters.3.value
            # Append text and commit id to dynamically assign workflow name.
            - src:
                dependencyName: ci-chorus-backend
                dataTemplate: "ci-chorus-backend-pr{{`{{ .Input.body.pull_request.number }}`}}"
              dest: metadata.generateName
              operation: prepend
            # Generate a nice title and description
            - src:
                dependencyName: ci-chorus-backend
                dataTemplate: "CI {{`{{ .Input.body.repository.name }}`}}"
              dest: metadata.annotations.workflows\.argoproj\.io/title
            - src:
                dependencyName: ci-chorus-backend
                dataTemplate: "PR #{{`{{ .Input.body.pull_request.number }}`}} - {{`{{ .Input.body.pull_request.head.ref }}`}}"
              dest: metadata.annotations.workflows\.argoproj\.io/description

    - template:
        conditions: build-chorus-backend
        name: github-workflow-trigger-chorus-backend
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: "-"
              spec:
                serviceAccountName: {{ $serviceAccountName }}
                entrypoint: build-chorus-backend
                volumes:
                  - name: docker-config
                    secret:
                      secretName: {{ .Values.sensor.dockerConfig.secretName | quote }}
                      items:
                        - key: .dockerconfigjson
                          path: config.json
                arguments:
                  parameters:
                    - name: repoUrl
                    - name: revision
                    - name: ref
                    - name: sha
                    - name: tag
                templates:
                  - name: build-chorus-backend
                    steps:
                      - - name: docker-build
                          templateRef:
                            name: {{ $fullName }}-docker-build-template
                            template: docker-build
                          arguments:
                            parameters:
                              - name: image
                                value: "backend"
                              - name: tag
                                value: "{{`{{workflow.parameters.tag}}`}}"
                              - name: sha
                                value: "{{`{{workflow.parameters.sha}}`}}"
                              - name: dockerfile
                                value: "docker/dockerfiles/Dockerfile"
                              - name: repository
                                value: "chorus"
                              - name: registry
                                value: {{ .Values.sensor.registry | quote }}
                              - name: dockerConfigSecret
                                value: {{ .Values.sensor.dockerConfig.secretName | quote }}
                            artifacts:
                              - name: source
                                git:
                                  repo: "{{`{{workflow.parameters.repoUrl}}`}}"
                                  revision: "{{`{{workflow.parameters.revision}}`}}"
                                  usernameSecret:
                                    name: {{ $githubSecretName }}
                                    key: username
                                  passwordSecret:
                                    name: {{ $githubSecretName }}
                                    key: password
                                  depth: 1
                                  ref: "{{`{{workflow.parameters.ref}}`}}"

                      - - name: oci-credentials
                          template: oci-credentials

                      - - name: helm-build
                          template: helm-build
                          arguments:
                            parameters:
                              - name: oci-username
                                value: "{{`{{ steps.oci-credentials.outputs.parameters.username }}`}}"
                              - name: oci-password
                                value: "{{`{{ steps.oci-credentials.outputs.parameters.password }}`}}"

                  - name: oci-credentials
                    container:
                      image: backplane/jq
                      volumeMounts:
                        - name: docker-config
                          mountPath: /.docker
                      env:
                        - name: DOCKER_CONFIG
                          value: /.docker
                        - name: REGISTRY
                          value: {{ .Values.sensor.registry | quote }}
                      command: [sh, -c]
                      args:
                        - >-
                          auth="$(cat "${DOCKER_CONFIG}/config.json" | jq -r ".auths.\"${REGISTRY}\".auth")";
                          echo "${auth}" | base64 -d | awk -F: '{ print $1 }' > /tmp/username;
                          echo "${auth}" | base64 -d | awk -F: '{ print $2 }' | base64 > /tmp/password
                    outputs:
                      parameters:
                        - name: username
                          valueFrom:
                            path: /tmp/username
                        - name: password
                          valueFrom:
                            path: /tmp/password

                  - name: helm-build
                    inputs:
                      # FIXME: we need artifact storage to pass the password as a file.
                      parameters:
                        - name: oci-username
                        - name: oci-password
                      artifacts:
                        - name: images
                          path: "/src"
                          git:
                            repo: "{{`{{workflow.parameters.repoUrl}}`}}"
                            revision: "{{`{{workflow.parameters.revision}}`}}"
                            usernameSecret:
                              name: {{ $githubSecretName }}
                              key: username
                            passwordSecret:
                              name: {{ $githubSecretName }}
                              key: password
                            depth: 1
                            ref: "{{`{{workflow.parameters.ref}}`}}"
                    container:
                      image: alpine/helm
                      env:
                        - name: REGISTRY
                          value: {{ .Values.sensor.registry | quote }}
                      command: [sh, -e, -c]
                      args:
                        - >-
                          helm package deploy/backend;
                          echo -n '{{`{{inputs.parameters.oci-password}}`}}' > /tmp/password;
                          cat /tmp/password | base64 -d | helm registry login -u '{{`{{inputs.parameters.oci-username}}`}}' --password-stdin  "${REGISTRY}";
                          helm push backend-*.tgz "oci://${REGISTRY}/charts";
                      workingDir: "/src"

          parameters:
            - src:
                dependencyName: build-chorus-backend
                dataKey: body.repository.clone_url
              dest: spec.arguments.parameters.0.value
            - src:
                dependencyName: build-chorus-backend
                dataKey: body.after
              dest: spec.arguments.parameters.1.value
            - src:
                dependencyName: build-chorus-backend
                dataKey: body.ref
              dest: spec.arguments.parameters.2.value
            - src:
                dependencyName: build-chorus-backend
                dataKey: body.head_commit.id
              dest: spec.arguments.parameters.3.value
            - src:
                dependencyName: build-chorus-backend
                dataTemplate: '{{`{{ if hasPrefix "refs/tags/v" .Input.body.ref }}{{ .Input.body.ref | trimPrefix "refs/tags/v"  }}{{ else }}n/a{{ end }}`}}'
              dest: spec.arguments.parameters.4.value
            # Append text and commit id to dynamically assign workflow name.
            - src:
                dependencyName: build-chorus-backend
                dataTemplate: "build-chorus-backend-{{`{{ .Input.body.head_commit.id | substr 0 7 }}`}}"
              dest: metadata.generateName
              operation: prepend
      retryStrategy:
        steps: 3
