{{- $fullName := include "argo-ci.fullname" . -}}
{{- $serviceAccountName := include "argo-ci.serviceAccountName" . -}}
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: {{ $fullName }}-build-images
  labels:
    {{- include "argo-ci.labels" . | nindent 4 }}
spec:
  template:
    serviceAccountName: {{ $serviceAccountName }}
  eventBusName: {{ $fullName }}-default
  dependencies:
    - name: build-images
      eventSourceName: {{ $fullName }}-github
      eventName: ci
      filters:
        data:
          - path: "[body.commits.#.modified.#()#,body.commits.#.added.#()#,body.commits.#.removed.#()#]"
            type: string
            value:
              - "server/*"
              - "apps/*/.*"
          - path: "body.ref"
            type: string
            value:
              - "refs/heads/master"

  triggers:
    - template:
        name: github-workflow-trigger
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: "-"
              spec:
                serviceAccountName: {{ $serviceAccountName }}
                entrypoint: build-images
                arguments:
                  parameters:
                    - name: repo-url
                    - name: revision
                    - name: ref
                    - name: commit_id
                    - name: commit_message
                    - name: added
                    - name: removed
                    - name: modified
                templates:
                  - name: build-images
                    steps:
                      - - name: get-paths
                          template: get-paths

                      - - name: docker-build
                          template: docker-build
                          arguments:
                            parameters:
                              - name: path
                                value: "{{`{{item}}`}}"
                          # This loop over the paths from get-paths
                          withParam: "{{`{{steps.get-paths.outputs.result}}`}}"

                  - name: get-paths
                    script:
                      image: python:3.12-alpine
                      command: [python]
                      source: |
                        import json, re, sys

                        paths = (
                          {{`{{workflow.parameters.added}}`}} +
                          {{`{{workflow.parameters.removed}}`}} +
                          {{`{{workflow.parameters.modified}}`}}
                        )

                        # The first capturing group is kept
                        patterns = (
                          re.compile("^(server)/"),
                          re.compile("^(apps/[^/]+)/"),
                        )

                        def keep_matching(strs: str, patterns: list):
                          """Keep the string matching any of the patterns."""
                          for x in strs:
                            for p in patterns:
                              if m := p.match(x):
                                yield m.group(1)
                                break

                        json.dump(list(set(keep_matching(paths, patterns))), sys.stdout)

                  - name: docker-build
                    inputs:
                      parameters:
                        - name: path
                      artifacts:
                        - name: images
                          path: /src
                          git:
                            repo: "{{`{{workflow.parameters.repo-url}}`}}"
                            revision: "{{`{{workflow.parameters.revision}}`}}"
                            usernameSecret:
                              name: argo-workflows-github-images
                              key: username
                            passwordSecret:
                              name: argo-workflows-github-images
                              key: password
                            depth: 1
                            ref: "{{`{{workflow.parameters.ref}}`}}"
                    container:
                      image: docker:26
                      env:
                        - name: DOCKER_HOST
                          value: 127.0.0.1
                        - name: OUTPUT
                          value: registry
                        - name: REGISTRY
                          value: {{ .Values.sensor.registry | quote }}
                      command: [sh, -c]
                      args:
                        - >-
                          until docker ps;
                            do sleep 3;
                          done;

                          exec ./build.sh
                      workingDir: "/src/{{`{{inputs.parameters.path}}`}}"
                    sidecars:
                      - name: dind
                        image: docker:26-dind
                        env:
                          - name: DOCKER_TLS_CERTDIR
                            value: ""
                        securityContext:
                          privileged: true
                        mirrorVolumeMounts: true

          parameters:
            - src:
                dependencyName: build-images
                dataKey: body.repository.clone_url
              dest: spec.arguments.parameters.0.value
            - src:
                dependencyName: build-images
                dataKey: body.after
              dest: spec.arguments.parameters.1.value
            - src:
                dependencyName: build-images
                dataKey: body.ref
              dest: spec.arguments.parameters.2.value
            - src:
                dependencyName: build-images
                dataTemplate: "{{`{{ .Input.body.head_commit.id | substr 0 7 }}`}}"
              dest: spec.arguments.parameters.3.value
            - src:
                dependencyName: build-images
                dataKey: body.head_commit.message
              dest: spec.arguments.parameters.4.value
            - src:
                dependencyName: build-images
                dataKey: body.head_commit.added
              dest: spec.arguments.parameters.5.value
            - src:
                dependencyName: build-images
                dataKey: body.head_commit.removed
              dest: spec.arguments.parameters.6.value
            - src:
                dependencyName: build-images
                dataKey: body.head_commit.modified
              dest: spec.arguments.parameters.7.value
            # Append text and commit id to dynamically assign workflow name
            - src:
                dependencyName: build-images
                dataTemplate: "build-images-{{`{{ .Input.body.head_commit.id | substr 0 7 }}`}}"
              dest: metadata.generateName
              operation: prepend
      retryStrategy:
        steps: 3
