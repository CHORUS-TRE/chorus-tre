kube-prometheus-stack:
  # CRDs should be installed beforehand such that Alertmanager can be configured with it
  crds:
    enabled: false

  alertmanager:
    ingress:
      enabled: false # What is below acts as documentation
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
      hosts:
        - alertmanager.build.chorus-tre.local
      tls:
        - secretName: alertmanager-general-tls
          hosts:
            - alertmanager.build.chorus-tre.local

    alertmanagerSpec:
      logFormat: json
      retention: 20h

      alertmanagerConfiguration:
        # This must match the name in the alertmanagerConfiguration.name at the bottom.
        name: global-alertmanager-config

      alertmanagerConfigSelector:
        matchLabels:
          alertmanagerConfig: enabled
      alertmanagerConfigMatcherStrategy:
        # default is OnNamespace
        # which means we cannot have a catchall to webex.
        type: null

      storage:
        volumeClaimTemplate:
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 256Mi

  grafana:
    enabled: true

    admin:
      existingSecret: "grafana-secret"
      #userKey: admin-user
      #passwordKey: admin-password

    ingress:
      enabled: false # What is below acts as documentation
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
      hosts:
        - grafana.build.chorus-tre.local
      tls:
        - secretName: grafana-general-tls
          hosts:
            - grafana.build.chorus-tre.local

    persistence:
      enabled: true

      size: 1Gi

    grafana.ini:
      # https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#analytics
      analytics:
        check_for_updates: false
        check_for_plugin_updates: false
        feedback_links_enabled: false
      # https://grafana.com/docs/grafana/latest/administration/configuration/#server
      server:
        enable_gzip: true
        domain: grafana.build.chorus-tre.local
        root_url: https://grafana.build.chorus-tre.local/

  prometheus:
    ingress:
      enabled: false # What is below acts as documentation
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
      hosts:
        - prometheus.build.chorus-tre.local
      tls:
        - secretName: prometheus-general-tls
          hosts:
            - prometheus.build.chorus-tre.local

    prometheusSpec:
      logFormat: json
      retention: 3d

      # All pods, probes and service monitors will be used.
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false

      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi

  kubelet:
    serviceMonitor:
      cAdvisorMetricRelabelings:
        - sourceLabels: [__name__]
          action: drop
          regex: 'container_cpu_(load_average_10s|system_seconds_total|user_seconds_total)'
        - sourceLabels: [__name__]
          action: drop
          regex: 'container_fs_(io_current|io_time_seconds_total|io_time_weighted_seconds_total|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)'
        - sourceLabels: [__name__]
          action: drop
          regex: 'container_memory_(mapped_file|swap)'
        - sourceLabels: [__name__]
          action: drop
          regex: 'container_(file_descriptors|tasks_state|threads_max)'
        - sourceLabels: [__name__, scope]
          action: drop
          regex: 'container_memory_failures_total;hierarchy'
        - sourceLabels: [__name__, interface]
          action: drop
          regex: 'container_network_.*;(cali|cilium|cni|lxc|nodelocaldns|tunl).*'
        - sourceLabels: [__name__]
          action: drop
          regex: 'container_spec.*'
        - sourceLabels: [id, pod]
          action: drop
          regex: '.+;'

alertmanagerConfiguration:
  name: global-alertmanager-config

  webex:
    enabled: true

    name: webex
    severity: critical # E.g. "warning|critical"

    credentials:
      # The name of the secret and the key containing the access token
      name: config-webex-secret
      key: accessToken

    roomID: ""
