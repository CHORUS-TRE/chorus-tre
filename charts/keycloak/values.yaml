keycloak:
  ## @param namespaceOverride String to fully override common.names.namespace
  ##
  namespaceOverride: "keycloak"
  ## Keycloak authentication parameters
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#admin-credentials
  ##
  auth:
    ## @param auth.adminUser Keycloak administrator user
    ##
    adminUser: admin
    ## @param auth.existingSecret Existing secret containing Keycloak admin password
    ##
    existingSecret: "keycloak-admin-postgres"
    ## @param auth.passwordSecretKey Key where the Keycloak admin password is being stored inside the existing secret.
    ##
    passwordSecretKey: "adminPassword"
  ## HTTPS settings
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#tls-encryption
  ##
  tls:
    ## @param tls.enabled Enable TLS encryption. Required for HTTPs traffic.
    ##
    enabled: true
    ## @param tls.autoGenerated Generate automatically self-signed TLS certificates. Currently only supports PEM certificates
    ##
    autoGenerated: true
    ## @param tls.usePem Use PEM certificates as input instead of PKS12/JKS stores
    ## If "true", the Keycloak chart will look for the files keycloak.key and keycloak.crt inside the secret provided with 'existingSecret'.
    ##
    usePem: true
  ## @param adminRealm Name of the admin realm
  ##
  adminRealm: "master"
  ## @param production Run Keycloak in production mode. TLS configuration is required except when using proxy=edge.
  ##
  production: true
  ## @param httpRelativePath Set the path relative to '/' for serving resources. Useful if you are migrating from older version which were using '/auth/'
  ## ref: https://www.keycloak.org/migration/migrating-to-quarkus#_default_context_path_changed
  ##
  httpRelativePath: "/"
  ## @param containerPorts.http Keycloak HTTP container port
  ## @param containerPorts.https Keycloak HTTPS container port
  ##
  containerPorts:
    http: 8080
    https: 8443
  ## Keycloak resource requests and limits
  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  ## @param resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if resources is set (resources is recommended for production).
  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
  ##
  resourcesPreset: "large"
  ## Service configuration
  ##
  service:
    ## @param service.type Kubernetes service type
    ##
    type: ClusterIP
    ## @param service.http.enabled Enable http port on service
    ##
    http:
      enabled: true
    ## @param service.ports.http Keycloak service HTTP port
    ## @param service.ports.https Keycloak service HTTPS port
    ##
    ports:
      http: 8080
      https: 8443
  ## Keycloak ingress parameters
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    ## @param ingress.enabled Enable ingress record generation for Keycloak
    ##
    enabled: true
    ## @param ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: "nginx"
    ## @param ingress.pathType Ingress path type
    ##
    pathType: Prefix
    ## @param ingress.hostname Default host for the ingress record (evaluated as template)
    ##
    hostname: keycloak.chorus-tre.local
    ## @param ingress.path [string] Default path for the ingress record (evaluated as template)
    ##
    path: "{{ .Values.httpRelativePath }}"
    ## @param ingress.servicePort Backend service port to use
    ## Default is http. Alternative is https.
    ##
    servicePort: 8080
    ## @param ingress.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" (tpl .Values.ingress.hostname .) }}`
    ## You can:
    ##   - Use the `ingress.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
    ##
    tls: true
    ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
    ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## extraTls:
    ## - hosts:
    ##     - keycloak.local
    ##   secretName: keycloak.local-tls
    ##
    extraTls:
      - hosts:
        - keycloak.chorus-tre.local
        secretName: keycloak.chorus-tre.local-tls
  ## Keycloak admin ingress parameters
  ## ref: https://kubernetes.io/docs/user-guide/ingress/
  ##
  adminIngress:
    ## @param adminIngress.enabled Enable admin ingress record generation for Keycloak
    ##
    enabled: true
    ## @param adminIngress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: "nginx"
    ## @param adminIngress.pathType Ingress path type
    ##
    pathType: Prefix
    ## @param adminIngress.hostname Default host for the admin ingress record (evaluated as template)
    ##
    hostname: keycloak.chorus-tre.local
    ## @param adminIngress.path [string] Default path for the admin ingress record (evaluated as template)
    ##
    path: "{{ .Values.httpRelativePath }}"
    ## @param adminIngress.servicePort Backend service port to use
    ## Default is http. Alternative is https.
    ##
    servicePort: 8080
    ## @param adminIngress.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    ## @param adminIngress.tls Enable TLS configuration for the host defined at `adminIngress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" (tpl .Values.adminIngress.hostname .) }}`
    ## You can:
    ##   - Use the `adminIngress.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `adminIngress.selfSigned=true`
    ##
    tls: true
    ## @param adminIngress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param adminIngress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
    ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## extraTls:
    ## - hosts:
    ##     - keycloak.local
    ##   secretName: keycloak.local-tls
    ##
    extraTls:
      - hosts:
        - keycloak.chorus-tre.local
        secretName: keycloak.chorus-tre.local-tls
  ## PostgreSQL chart configuration
  ## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
  ## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
  ## @param postgresql.auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` with key `postgres-password` is provided
  ## @param postgresql.auth.username Name for a custom user to create
  ## @param postgresql.auth.password Password for the custom user to create
  ## @param postgresql.auth.database Name for a custom database to create
  ## @param postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials
  ## @param postgresql.architecture PostgreSQL architecture (`standalone` or `replication`)
  ##
  postgresql:
    enabled: true
    auth:
      existingSecret: "keycloak-admin-postgres"