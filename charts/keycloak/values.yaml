keycloak:
  ## @param namespaceOverride String to fully override common.names.namespace
  ##
  namespaceOverride: "keycloak"

  ## Keycloak authentication parameters
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/keycloak#admin-credentials
  ##
  auth:
    ## @param auth.adminUser Keycloak administrator user
    ##
    adminUser: "admin"
    ## @param auth.existingSecret Existing secret containing Keycloak admin password
    ##
    existingSecret: "keycloak-admin-postgres"
    ## @param auth.passwordSecretKey Key where the Keycloak admin password is being stored inside the existing secret.
    ##
    passwordSecretKey: "adminPassword"

  ## @param production Run Keycloak in production mode. TLS configuration is required except when using proxy=edge.
  ##
  production: true

  ## @param proxy reverse Proxy mode edge, reencrypt, passthrough or none
  ## ref: https://www.keycloak.org/server/reverseproxy
  ##
  proxy: edge

  ## Service configuration
  ##
  service:
    ## @param service.ports.http Keycloak service HTTP port
    ##
    ports:
      http: 8080 # container port

  ## Keycloak ingress parameters
  ## ref: https://kubernetes.io/docs/user-guide/ingress/
  ##
  ingress:
    ## @param ingress.enabled Enable ingress record generation for Keycloak
    ##
    enabled: true
    ## @param ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ##
    ingressClassName: "nginx"
    ## @param ingress.pathType Ingress path type
    ##
    pathType: Prefix
    ## @param ingress.hostname Default host for the ingress record (evaluated as template)
    ##
    hostname: keycloak.chorus-tre.local
    ## @param ingress.servicePort Backend service port to use
    ## Default is http. Alternative is https.
    ##
    servicePort: 8080
    ## @param ingress.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" (tpl .Values.ingress.hostname .) }}`
    ## You can:
    ##   - Use the `ingress.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
    ##
  	tls:
  	  - hosts:
        - keycloak.chorus-tre.local
        secretName: keycloak-tls

  ## @section Database parameters

  ## PostgreSQL chart configuration
  ## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
  ## @param postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials
  ##
  postgresql:
    auth:
      existingSecret: "keycloak-admin-postgres"
