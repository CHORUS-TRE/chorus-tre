{{- $fullName := include "chorus-ci.fullname" . -}}
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: {{ $fullName }}-helm-publish-template
  labels:
    {{- include "chorus-ci.labels" . | nindent 4 }}
spec:
  arguments:
    artifacts:
      - name: source
    parameters:
      - name: chartsDir
        value: "charts"
      - name: chartName
        value: "my-chart"
      - name: registry
        value: "harbor.build.chorus-tre.local"
      - name: dockerConfigSecret

  templates:
  - name: helm-publish
    inputs:
      parameters:
        - name: chartsDir
        - name: chartName
        - name: registry
        - name: dockerConfigSecret
      artifacts:
        - name: source
          path: "/src"

    volumes:
      - name: docker-config
        secret:
          secretName: "{{`{{inputs.parameters.dockerConfigSecret}}`}}"
          items:
            - key: .dockerconfigjson
              path: config.json

    container:
      # This image comes with yq (rather than jq)
      image: {{ .Values.template.helm.imageDomain | default .Values.global.imageDomain }}/{{ .Values.template.helm.imageNamespace | default .Values.global.imageNamespace }}/helm:{{ .Values.template.helm.tag | default "latest" }}
      volumeMounts:
        - name: docker-config
          mountPath: /.docker
      env:
        - name: DOCKER_CONFIG
          value: /.docker
        - name: REGISTRY
          value: "{{`{{inputs.parameters.registry}}`}}"
        - name: CHARTS_DIR
          value: "{{`{{inputs.parameters.chartsDir}}`}}"
        - name: CHART_NAME
          value: "{{`{{inputs.parameters.chartName}}`}}"
      command: [sh, -e, -c]
      args: 
        - >-
          cat "${DOCKER_CONFIG}/config.json"
          | yq -r ".auths.\"${REGISTRY}\".auth"
          | base64 -d
          > /tmp/credentials;

          username="$(cat /tmp/credentials
          | awk -F: '{ print $1 }')";

          cat /tmp/credentials
          | awk -F: '{ print $2 }'
          | helm registry login -u "${username}" --password-stdin "${REGISTRY}";

          helm package "${CHARTS_DIR}/${CHART_NAME}";
          helm push ${CHART_NAME}-*.tgz "oci://${REGISTRY}/charts"
      workingDir: "/src"
