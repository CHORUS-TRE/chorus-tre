{{- $fullName := include "chorus-ci.fullname" . -}}
{{- $serviceAccountName := include "chorus-ci.serviceAccountName" . -}}
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: {{ $fullName }}-build-images
  labels:
    {{- include "chorus-ci.labels" . | nindent 4 }}
spec:
  eventBusName: {{ $fullName }}-default
  template:
    serviceAccountName: {{ $serviceAccountName }}
  dependencies:
    - name: build-images
      eventSourceName: {{ $fullName }}-github
      eventName: ci
      filters:
        data:
          - path: "[body.commits.#.modified.#()#,body.commits.#.added.#()#,body.commits.#.removed.#()#]"
            type: string
            value:
              - "server/*"
              - "apps/*/.*"
              - "services/*/.*"

          - path: "body.ref"
            type: string
            value:
              - "refs/heads/master"

  triggers:
    - template:
        name: github-workflow-trigger-images
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: "-"
              spec:
                serviceAccountName: {{ $serviceAccountName }}
                entrypoint: build-images

                ttlStrategy:
                  secondsAfterSuccess: 300

                volumes:
                  - name: docker-config
                    secret:
                      secretName: {{ .Values.sensor.dockerConfig.secretName | quote }}
                      items:
                        - key: .dockerconfigjson
                          path: config.json

                arguments:
                  parameters:
                    - name: repo-url
                    - name: revision
                    - name: ref
                    - name: commit_id
                    - name: added
                    - name: removed
                    - name: modified

                templates:
                  - name: build-images
                    steps:
                      - - name: get-paths
                          template: get-paths

                      - - name: generate-volume
                          template: generate-volume
                          arguments:
                            parameters:
                            - name: pvc-name
                              value: "{{`{{item.pvc_name}}`}}"
                            - name: pvc-size
                              value: {{ .Values.chorusImages.dockerDataStorage.storageRequest | default .Values.workflow.dockerDataStorage.storageRequest | quote }}
                            - name: storage-class-name
                              value: {{ .Values.chorusImages.dockerDataStorage.storageClassName | default .Values.workflow.dockerDataStorage.storageClassName | quote }}
                            # This loop over the paths from get-paths
                          withParam: "{{`{{steps.get-paths.outputs.result}}`}}"

                      - - name: docker-build
                          template: docker-build
                          arguments:
                            parameters:
                              - name: path
                                value: "{{`{{item.path}}`}}"
                              - name: pvc-name
                                value: "{{`{{item.pvc_name}}`}}"
                          # This loop over the paths from get-paths
                          withParam: "{{`{{steps.get-paths.outputs.result}}`}}"

                  - name: get-paths
                    script:
                      image: {{ .Values.global.imageRegistry }}/python:{{ .Values.chorusImages.python.tag }}
                      command: [python]
                      source: |
                        import json, re, sys, uuid

                        paths = (
                          {{`{{workflow.parameters.added}}`}} +
                          {{`{{workflow.parameters.removed}}`}} +
                          {{`{{workflow.parameters.modified}}`}}
                        )

                        # The first capturing group is kept
                        patterns = (
                          re.compile("^(server)/"),
                          re.compile("^(apps/[^/]+)/"),
                        )

                        def keep_matching(strs: str, patterns: list):
                          """Keep the string matching any of the patterns."""
                          for x in strs:
                            for p in patterns:
                              if m := p.match(x):
                                yield m.group(1)
                                break

                        def get_pvc_name(path: str) -> str:
                          """Generate a PVC name based on the path."""
                          length = 7
                          random_string = str(uuid.uuid4()).replace('-', '')[:length]
                          return path.replace('/', '-') + '-' + random_string

                        def get_paths_with_pvc_names(paths: list, patterns: list):
                          """Generate list of dicts with path and pvc_name."""
                          unique_paths = list(set(keep_matching(paths, patterns)))
                          for path in unique_paths:
                            yield {
                              'path': path,
                              'pvc_name': get_pvc_name(path)
                            }

                        json.dump(list(get_paths_with_pvc_names(paths, patterns)), sys.stdout)

                  - name: generate-volume
                    inputs:
                      parameters:
                        - name: pvc-name
                        - name: pvc-size
                        - name: storage-class-name
                    resource:
                      action: create
                      setOwnerReference: true
                      successCondition: status.phase == Bound
                      failureCondition: status.phase == Lost
                      manifest: |
                        apiVersion: v1
                        kind: PersistentVolumeClaim
                        metadata:
                          name: "{{`{{inputs.parameters.pvc-name}}`}}"
                        spec:
                          accessModes: ['ReadWriteOnce']
                          resources:
                            requests:
                              storage: "{{`{{inputs.parameters.pvc-size}}`}}"
                          storageClassName: "{{`{{inputs.parameters.storage-class-name}}`}}"

                  - name: docker-build
                    inputs:
                      parameters:
                        - name: path
                        - name: pvc-name
                      artifacts:
                        - name: images
                          path: /src
                          git:
                            repo: "{{`{{workflow.parameters.repo-url}}`}}"
                            revision: "{{`{{workflow.parameters.revision}}`}}"
                            usernameSecret:
                              name: argo-workflows-github-images
                              key: username
                            passwordSecret:
                              name: argo-workflows-github-images
                              key: password
                            depth: 1
                            ref: "{{`{{workflow.parameters.ref}}`}}"
                    volumes:
                      - name: docker-data
                        persistentVolumeClaim:
                          claimName: "{{`{{inputs.parameters.pvc-name}}`}}"
                    container:
                      image: {{ .Values.global.imageRegistry }}/docker:{{ .Values.chorusImages.docker.tag }}
                      volumeMounts:
                        - name: docker-config
                          mountPath: /.docker
                        - name: docker-data
                          mountPath: /var/lib/docker
                      env:
                          # Otherwise buildx uses DOCKER_CONFIG for it, which is read-only.
                        - name: BUILDX_CONFIG
                          value: /tmp/buildx
                        - name: DOCKER_CONFIG
                          value: /.docker
                        - name: DOCKER_HOST
                          value: 127.0.0.1
                        - name: OUTPUT
                          value: registry
                        - name: REGISTRY
                          value: {{ .Values.sensor.registry | quote }}
                      command: [sh, -c]
                      args:
                        - >-
                          until docker ps;
                            do sleep 3;
                          done;

                          exec ./build.sh
                      workingDir: "/src/{{`{{inputs.parameters.path}}`}}"
                    sidecars:
                      - name: dind
                        image: {{ .Values.global.imageRegistry }}/docker:{{ .Values.chorusImages.docker.tag }}-dind
                        command: ["dockerd-entrypoint.sh"]
                        env:
                          - name: DOCKER_TLS_CERTDIR
                            value: ""
                        securityContext:
                          privileged: true
                        mirrorVolumeMounts: true

          parameters:
            - src:
                dependencyName: build-images
                dataKey: body.repository.clone_url
              dest: spec.arguments.parameters.0.value
            - src:
                dependencyName: build-images
                dataKey: body.after
              dest: spec.arguments.parameters.1.value
            - src:
                dependencyName: build-images
                dataKey: body.ref
              dest: spec.arguments.parameters.2.value
            - src:
                dependencyName: build-images
                dataTemplate: "{{`{{ .Input.body.head_commit.id | substr 0 7 }}`}}"
              dest: spec.arguments.parameters.3.value
            - src:
                dependencyName: build-images
                dataKey: body.head_commit.added
              dest: spec.arguments.parameters.4.value
            - src:
                dependencyName: build-images
                dataKey: body.head_commit.removed
              dest: spec.arguments.parameters.5.value
            - src:
                dependencyName: build-images
                dataKey: body.head_commit.modified
              dest: spec.arguments.parameters.6.value
            # Append text and commit id to dynamically assign workflow name
            - src:
                dependencyName: build-images
                dataTemplate: "build-images-{{`{{ .Input.body.head_commit.id | substr 0 7 }}`}}"
              dest: metadata.generateName
              operation: prepend
      retryStrategy:
        steps: 3
